@page
@using Ethereal_Cloud.Models
@model Ethereal_Cloud.Pages.UploadModel
@{
    ViewBag.Title = "Shared";
    Layout = "Shared/_Layout.cshtml";
    <link rel="stylesheet" href="/css/Upload.css" asp-append-version="true">
    <link rel="stylesheet" href="/css/Shared.css" asp-append-version="true">


    <style>

        #share-button-holder {
            padding: 0px;
            position: absolute;
            right: 20px;
            top: 10px;
        }

        #share-button {
            height: 36px;
            border-bottom: none;
            background: #cbbbe2;
        }

            #share-button.active {
                background: #f2f2f2;
            }

            #share-button:hover {
                background: #cbbb11;
            }
    
    </style>


}


<!-- File explorer -->
<div id="file-explorer" class="row mt-3">

    <!-- Files Box -->
    <div id="filebox" class="col-lg-12 col-md-12 col-sm-12 h-100">
        
        <!-- Shared Page Buttons -->
        <div id="share-button-holder">

            <button id="share-button" class="active">Shared With Me</button>

            <button id="share-button" class="">Sharing With</button>

        </div>


        
        <!-- FilePath -->
        <div id="filepath" class="row">

            <!-- Sort button -->
            <div id="filepath-button" class="col">
                <a href="#" onclick="toggleSort()">
                    <img title="Sort" id="toggleImage" class="row" src="@SetSort()" alt="path">
                </a>
            </div>

        </div>


        <!-- Shared With Me -->
        <div id="scrollbox" class="row" style="display: none;">
            @if (Model.DisplayList.Count > 0)
            {
                <div class="row" id="scrollbox-contents">
                    @foreach (var display in Model.DisplayList)
                    {
                        <div id="uploaded-files" class="file-hover" onmouseover="showButton('fileButtonHolder-@display.Id')" onmouseout="hideButton('fileButtonHolder-@display.Id', 'file-info-@display.Id')">
                            <a id="fileLink">
                                <img id="uploaded-files-img" src="~/images/file-icons/@GetImageForFileType(@display.Type)" alt="logo" class="logo">
                            </a>
                            <p>@display.Name</p>

                            <!-- Buttons for files/folders-->
                            <div id="fileButtonHolder-@display.Id" class="fileButtonHolder" style="">

                                <button id="fileSettingsButton" aria-expanded="false" aria-controls="file-info-@display.Id" onclick="toggleFileInfo('file-info-@display.Id')">
                                    <img id="fileSettingsImage" src="~/images/file-icons/three-dots.svg" alt="path">

                                    <div id="file-info-@display.Id" class="file-info">
                                        <div class="menu" id="@display.Id-menu">
                                            <div class="menu-item" onclick="restoreFileFolder('@display.Id', '@display.Type')">Restore</div>
                                        </div>
                                    </div>
                                </button>

                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="no-files text-center">
                    <img class="row" src="~/images/tools/search.svg" alt="search" style="width: -webkit-fill-available; opacity: 50%;">
                    <h3 class="row">No files here</h3>
                </div>
            }
        </div>









        <!-- Sharinng With Me -->
        <div id="scrollbox" class="row" style="display: flex;">
            @if (Model.DisplayList.Count > 0)
            {
                <div class="row" id="scrollbox-contents">
                    @foreach (var display in Model.DisplayList)
                    {
                        <div id="uploaded-files" class="file-hover" onmouseover="showButton('fileButtonHolder-@display.Id')" onmouseout="hideButton('fileButtonHolder-@display.Id', 'file-info-@display.Id')">
                            <a id="fileLink">
                                <img id="uploaded-files-img" src="~/images/file-icons/@GetImageForFileType(@display.Type)" alt="logo" class="logo">
                            </a>
                            <p>@display.Name</p>

                            <!-- Buttons for files/folders-->
                            <div id="fileButtonHolder-@display.Id" class="fileButtonHolder" style="">

                                <button id="fileSettingsButton" aria-expanded="false" aria-controls="file-info-@display.Id" onclick="toggleFileInfo('file-info-@display.Id')">
                                    <img id="fileSettingsImage" src="~/images/file-icons/three-dots.svg" alt="path">

                                    <div id="file-info-@display.Id" class="file-info">
                                        <div class="menu" id="@display.Id-menu">
                                            <div class="menu-item" onclick="restoreFileFolder('@display.Id', '@display.Type')">Restore</div>
                                        </div>
                                    </div>
                                </button>

                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="no-files text-center">
                    <img class="row" src="~/images/tools/search.svg" alt="search" style="width: -webkit-fill-available; opacity: 50%;">
                    <h3 class="row">No files here</h3>
                </div>
            }
        </div>
























    </div>
</div>

@{
    <!-- Scripts -->
    <script>
        function showButton(id) {
            var button = document.getElementById(id);
            button.style.display = 'inline';
        }

        function hideButton(holderId, menuId) {
            if (matchMedia('(hover: hover)').matches) {
                var holder = document.getElementById(holderId);
                var menu = document.getElementById(menuId);
                if (menu.style.display !== "block") {
                    holder.style.display = "none";
                }
            }
        }

        function toggleFileInfo(id) {

            var fileInfo = document.getElementById(id);
            var expanded = fileInfo.getAttribute('aria-expanded') === 'true';

            // Toggle the aria-expanded attribute
            fileInfo.setAttribute('aria-expanded', !expanded);

            // Toggle the visibility of the file info
            if (expanded) {
                fileInfo.style.display = 'none';
            } else {
                fileInfo.style.display = 'block';
            }
        }

        document.body.addEventListener('click', function (event) {
            var parent = event.target.parentNode;

            if (parent.id === 'fileSettingsButton') {

                return;
            }


            var menuOpen = document.querySelectorAll('.file-info');
            menuOpen.forEach(function (menu) {
                menu.setAttribute('aria-expanded', false);
                menu.style.display = 'none';
            });

            if (matchMedia('(hover: hover)').matches) {
                var buttonHolder = document.querySelectorAll('.fileButtonHolder');
                buttonHolder.forEach(function (button) {
                    button.style.display = 'none';
                });
            }
        });

        function navIntoFolderOrDownload(id, fileType, name) {
            if (fileType === "Folder") {

                document.getElementById('idNavInput').value = id;
                document.getElementById('nameNavInput').value = name;

                // Submit the form
                document.getElementById('navForm').submit();
            } else {

                downloadFile(id);
            }
        }

        // Console logger
        var logger = '@ViewData["logger"]';
        if (logger !== null) {
            console.log(decodeHtml(logger));
        }

        //Decodes html text
        function decodeHtml(html) {
            var txt = document.createElement("textarea");
            txt.innerHTML = html;
            return txt.value;
        }



        // Mobile hold tap function
        var holdtapTimer = null;

        function tap(id, fileType, name) {
            holdtapTimer = setTimeout(function () {
                tapHoldTimer(id, fileType, name);
            }, 500); //500ms time hold

        }

        function tapCancel() {
            clearTimeout(holdtapTimer);
        }

        function tapHoldTimer(id, fileType, name) {
            navIntoFolderOrDownload(id, fileType, name);
        }


    </script>



    string GetImageForFileType(string fileType)
    {
        //looks at files Mime type and gets appropriate image
        switch (fileType.ToLower())
        {
            // Folder
            case "folder":
                return "folder.svg";

            // Images
            case "image/png":
            case "image/jpeg":
            case "image/gif":
                return "gen-image.svg";

            // Audio
            case "audio/mpeg":
                return "gen-music.svg";

            // Video
            case "video/mp4":
                return "gen-video.svg";

            // PDF
            case "application/pdf":
                return "file-pdf.svg";

            // Office products
            case "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
            case "application/msword":
                return "file-word.svg"; // Word Document (.docx)

            case "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
            case "application/vnd.ms-excel":
                return "file-excel.svg"; // Excel Spreadsheet (.xlsx)

            case "application/vnd.openxmlformats-officedocument.presentationml.presentation":
            case "application/vnd.ms-powerpoint":
                return "file-powerpoint.svg"; // PowerPoint Presentation (.pptx)

            case "application/x-mspublisher":
                return "file-publisher.svg"; // Publisher (.pub)

            case "application/msaccess":
                return "file-access.svg"; // Access Database (.accdb)

            // Executable
            case "application/x-msdownload":
            case "application/octet-stream":
            case "application/vnd.microsoft.portable-executable":
                return "file-executable.svg"; // Executable (.exe)

            //JSON
            case "application/json":
                return "file-json.svg";

            //Plain text
            case "text/plain":
                return "file-text.svg";

            // Anything else
            default:
                return "gen-unknown.svg"; // Unknown type
        }
    }


    string SetSort()
    {
        if (@Model.sortDisplay)
        {
            // Alphabetical
            return "images/tools/sort-alpha-up.svg";

        }
        else
        {
            // Backwards alphabetical
            return "images/tools/sort-alpha-down.svg";
        }
    }
}