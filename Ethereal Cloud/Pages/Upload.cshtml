@page
@using Ethereal_Cloud.Models
@model Ethereal_Cloud.Pages.UploadModel
@{
    ViewBag.Title = "Upload";
    Layout = "Shared/_Layout.cshtml";
    <link rel="stylesheet" href="/css/Upload.css" asp-append-version="true">

}

<!-- File explorer -->
<div id="file-explorer" class="row mt-3">

    <!-- Files Box -->
    <div id="filebox" class="col-lg-12 col-md-12 col-sm-12 h-100">
        <!-- FilePath -->
        <div id="filepath" class="row">

            <!-- Sort button -->
            <div id="filepath-button" class="col">
                <a href="#" onclick="toggleSort()">
                    <img title="Sort" id="toggleImage" class="row" src="@SetSort()" alt="path">
                </a>
            </div>

            <!-- New folder button -->
            <div id="filepath-button" class="col">
                <a href="#" onclick="showInputBox()">
                    <img title="Create New Folder" class="row" src="~/images/tools/folder-plus.svg" alt="path">
                </a>
            </div>

            <!-- Divider -->
            <div id="filepath-button" class="col">
                <a>
                    <img id="rotated-image" style="margin:0;" src="~/images/file-path/dash-lg.svg" alt="path">
                </a>
            </div>

            <!-- Path Back button-->
            <div id="filepath-button" class="col">
                <a asp-page-handler="GoToFolderInPath" asp-route-Id="-1">
                    <img title="Back" src="~/images/file-path/path-back.svg" alt="path">
                </a>
            </div>

            <!-- Root Image -->
            <div class="col" id="path-root">
                <a asp-page-handler="GoToFolderInPath" asp-route-Id="-2">
                    <img title="Home" src="~/images/file-path/path-root.svg" alt="path">
                </a>
            </div>

            <div id="content-container" class="col">
                <!-- Current Filepath-->
                @if (Model.FolderPath.Count > 0)
                {
                    @foreach (var display in Model.FolderPath)
                    {
                        <div id="path-divider" class="col">></div>

                        <div class="file-hover">
                            <a asp-page-handler="GoToFolderInPath" asp-route-Id="@display.FolderID">
                                <p id="path-folder" style="margin:3px;">@display.Foldername</p>
                            </a>
                        </div>
                    }
                }
            </div>
        </div>

        <!-- Appears when the files are loaded -->
        <div id="scrollbox" class="row d-flex">
            @if (Model.DisplayList.Count > 0)
            {
                <div class="row" id="scrollbox-contents">
                    @foreach (var display in Model.DisplayList)
                    {
                        <div id="uploaded-files" class="file-hover" ondblclick="navIntoFolder('@display.Id','@display.Type','@display.Name')" onmouseover="showButton('fileButtonHolder-@display.Id')" onmouseout="hideButton('fileButtonHolder-@display.Id', 'file-info-@display.Id')">
                            <a id="fileLink">
                                <img id="uploaded-files-img" src="~/images/file-icons/@GetImageForFileType(@display.Type)" alt="logo" class="logo">
                            </a>
                            <p>@display.Name</p>

                            <!-- Buttons for files/folders-->
                            <div id="fileButtonHolder-@display.Id" class="fileButtonHolder" style="">


                                @if (@display.Type == "Folder")
                                {

                                    <button id="fileSettingsButton" aria-expanded="false" aria-controls="file-info-@display.Id" onclick="toggleFileInfo('file-info-@display.Id')">
                                        <img id="fileSettingsImage" src="~/images/file-icons/three-dots.svg" alt="path">

                                        <div id="file-info-@display.Id" class="file-info">
                                            <div class="menu" id="@display.Id-menu">
                                                <div class="menu-item" onclick="deleteFile('@display.Id', '@display.Type')">Delete</div>
                                                <div class="menu-item" onclick="renameFile('@display.Id')">Rename</div>
                                            </div>
                                        </div>
                                    </button>
                                }
                                else
                                {
                                    <button id="fileSettingsButton" onclick="downloadFile('@display.Id')">
                                        <img id="fileSettingsImage" src="~/images/file-icons/cloud-download.svg" alt="path">
                                    </button>
                                    <button id="fileSettingsButton" aria-expanded="false" aria-controls="file-info-@display.Id" onclick="toggleFileInfo('file-info-@display.Id')">
                                        <img id="fileSettingsImage" src="~/images/file-icons/three-dots.svg" alt="path">

                                        <div id="file-info-@display.Id" class="file-info">
                                            <div class="menu" id="@display.Id-menu">
                                                <div class="menu-item" onclick="downloadFile('@display.Id')">Download</div>
                                                <div class="menu-item" onclick="deleteFile('@display.Id', '@display.Type')">Delete</div>
                                                <div class="menu-item" onclick="renameFile('@display.Id')">Rename</div>
                                            </div>
                                        </div>
                                    </button>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="no-files text-center">
                    <img class="row" src="~/images/tools/search.svg" alt="search" style="width: -webkit-fill-available; opacity: 50%;">
                    <h3 class="row">No files here</h3>
                </div>
            }
        </div>

        <!-- Hidden folder naming input box -->
        <div id="input-box" class="popup-input" style="display:none;">
            <form id="folder-form" method="post" asp-page-handler="CreateFolder">
                <!--FileName Field-->
                <div class="form-floating">
                    <input asp-for="createFolderDetails.FolderName" class="form-control" placeholder=" ">
                    <label for="folderName">Folder Name</label>
                    <span asp-validation-for="createFolderDetails.FolderName" class="text-danger"></span>
                </div>

                <!-- Submit button -->
                <div class="mb-3 ">
                    <button type="submit" id="create-folder-btn" class="popup-input-btn btn btn-primary">Create Folder</button>
                    <button type="button" onclick="cancelFolderCreation()" class="popup-input-btn btn btn-secondary">Cancel</button>
                </div>
            </form>
        </div>
    </div>
    <!-- Bottom upload dotted box -->
    <div id="upload-box" class="row mt-3">
        <h3>Upload your files</h3>
        <form method="post" enctype="multipart/form-data" asp-page-handler="Upload">
            <div class="mb-3" id="file-input-box">
                <input class="form-control" type="file" name="uploadedFiles" id="fileInput" multiple>
                <input type="submit" class="btn btn-success" value="Upload" />
            </div>
        </form>
    </div>
</div>

@{
    <!-- Scripts -->
    <script>
        function showButton(id) {
            var button = document.getElementById(id);
            button.style.display = 'inline';
        }

        function hideButton(id) {
            var button = document.getElementById(id);
            button.style.display = 'none';
        }

        function hideButton(holderId, menuId) {
            var holder = document.getElementById(holderId);
            var menu = document.getElementById(menuId);
            if (menu.style.display !== "block") {
                holder.style.display = "none";
            }
        }

        function toggleFileInfo(id) {

            var fileInfo = document.getElementById(id);
            var expanded = fileInfo.getAttribute('aria-expanded') === 'true';

            // Toggle the aria-expanded attribute
            fileInfo.setAttribute('aria-expanded', !expanded);

            // Toggle the visibility of the file info
            if (expanded) {
                fileInfo.style.display = 'none';
            } else {
                fileInfo.style.display = 'block';
            }
        }

        function showMenu(id) {
            if (matchMedia('(hover: hover)').matches) {
                var menu = document.getElementById(id + "-menu");

                menu.style.display = "block";
            }
        }

        function hideMenu(id) {
            var menu = document.getElementById(id + "-menu");
            menu.style.display = "none";
        }

        document.body.addEventListener('click', function (event) {
            var parent = event.target.parentNode;

            if (parent.id === 'fileSettingsButton') {

                return;
            }


            var menuOpen = document.querySelectorAll('.file-info');
            menuOpen.forEach(function (menu) {
                menu.setAttribute('aria-expanded', false);
                menu.style.display = 'none';
            });

            if (matchMedia('(hover: hover)').matches) {
                var buttonHolder = document.querySelectorAll('.fileButtonHolder');
                buttonHolder.forEach(function (button) {
                    button.style.display = 'none';
                });
            }
        });



        //Menu functions

        function downloadFile(id) {

            document.getElementById('fileIdDownloadInput').value = id;

            // Submit the form
            document.getElementById('downloadForm').submit();
        }

        function deleteFile(id, fileType) {
            document.getElementById('fileIdInput').value = id;
            document.getElementById('typeInput').value = fileType;

            // Submit the form
            document.getElementById('deleteForm').submit();
        }

        function renameFile(id) {
            // Implement rename logic here
            console.log("Renaming file: " + id);
        }


        function navIntoFolder(id, fileType, name) {
            if (fileType === "Folder") {

                document.getElementById('idNavInput').value = id;
                document.getElementById('nameNavInput').value = name;

                // Submit the form
                document.getElementById('navForm').submit();
            } else {

                downloadFile(id);
            }
        }

        // Console logger
        var logger = '@ViewData["logger"]';
        if (logger !== null) {
            console.log(decodeHtml(logger));
        }

        //Decodes html text
        function decodeHtml(html) {
            var txt = document.createElement("textarea");
            txt.innerHTML = html;
            return txt.value;
        }

        //Changes the sort image when pressed
        function toggleSort() {
            // Submit the form
            document.getElementById('sortForm').submit();
        }

        //Loads naming folder popup
        function showInputBox() {
            document.getElementById('input-box').style.display = 'block';
            document.querySelector('#input-box input[name="foldername"]').focus();
        }

        //Cancels the folder creation
        function cancelFolderCreation() {
            document.getElementById('input-box').style.display = 'none';
        }


        console.log("sort: " + @Model.sortDisplay)

    </script>


    string SetSort()
    {
        if (@Model.sortDisplay)
        {
            // Alphabetical
            return "images/tools/sort-alpha-up.svg";

        }
        else
        {
            // Backwards alphabetical
            return "images/tools/sort-alpha-down.svg";
        }
    }

    string GetImageForFileType(string fileType)
    {
        //looks at files Mime type and gets appropriate image
        switch (fileType.ToLower())
        {
            // Folder
            case "folder":
                return "folder.svg";

            // Images
            case "image/png":
            case "image/jpeg":
            case "image/gif":
                return "gen-image.svg";

            // Audio
            case "audio/mpeg":
                return "gen-music.svg";

            // Video
            case "video/mp4":
                return "gen-video.svg";

            // PDF
            case "application/pdf":
                return "file-pdf.svg";

            // Office products
            case "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
            case "application/msword":
                return "file-word.svg"; // Word Document (.docx)

            case "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
            case "application/vnd.ms-excel":
                return "file-excel.svg"; // Excel Spreadsheet (.xlsx)

            case "application/vnd.openxmlformats-officedocument.presentationml.presentation":
            case "application/vnd.ms-powerpoint":
                return "file-powerpoint.svg"; // PowerPoint Presentation (.pptx)

            case "application/x-mspublisher":
                return "file-publisher.svg"; // Publisher (.pub)

            case "application/msaccess":
                return "file-access.svg"; // Access Database (.accdb)

            // Executable
            case "application/x-msdownload":
            case "application/octet-stream":
            case "application/vnd.microsoft.portable-executable":
                return "file-executable.svg"; // Executable (.exe)

            //JSON
            case "application/json":
                return "file-json.svg";

            //Plain text
            case "text/plain":
                return "file-text.svg";

            // Anything else
            default:
                return "gen-unknown.svg"; // Unknown type
        }
    }


    <!-- Hidden form for delete action -->
    <form id="deleteForm" method="post" asp-page-handler="Delete">
        <input name="fileId" type="hidden" id="fileIdInput">
        <input name="type" type="hidden" id="typeInput">
    </form>

    <!-- Hidden form for download action -->
    <form id="downloadForm" method="post" asp-page-handler="Download">
        <input name="fileId" type="hidden" id="fileIdDownloadInput">
    </form>

    <!-- Hidden form for nav action -->
    <form id="navForm" method="post" asp-page-handler="Navigate">
        <input name="Id" type="hidden" id="idNavInput">
        <input name="Name" type="hidden" id="nameNavInput">
    </form>

    <!-- Hidden form for sorting -->
    <form id="sortForm" method="post" asp-page-handler="Sort">
    </form>

}
