@page
@model Ethereal_Cloud.Pages.BinModel
@{
    ViewBag.Title = "Bin";
    Layout = "Shared/_Layout.cshtml";
    <link rel="stylesheet" href="/css/Upload.css" asp-append-version="true">
}

<!-- File explorer -->
<div id="file-explorer" class="row mt-3">

    <!-- Files Box -->
    <div id="filebox" class="col-lg-12 col-md-12 col-sm-12 h-100">
        <!-- FilePath -->
        <div id="filepath" class="row">

            <!-- Sort button -->
            <div id="filepath-button" class="col">
                <a href="#" onclick="toggleImage()">
                    <img title="Sort" id="toggleImage" class="row" src="~/images/tools/sort-alpha-down.svg" alt="path">
                </a>
            </div>
        </div>

        <!-- Appears when the files are loaded -->
        <div id="scrollbox" class="row d-flex">
            @if (Model.DisplayList.Count > 0)
            {
                <div class="row" id="scrollbox-contents">
                    @foreach (var display in Model.DisplayList)
                    {
                        <div id="uploaded-files" class="file-hover" ondblclick="navIntoFolder('@display.Id','@display.Type','@display.Name')" onmouseover="showButton('fileButtonHolder-@display.Id')" onmouseout="hideButton('fileButtonHolder-@display.Id', 'file-info-@display.Id')">
                            <a id="fileLink">
                                <img id="uploaded-files-img" src="~/images/file-icons/@GetImageForFileType(@display.Type)" alt="logo" class="logo">
                            </a>
                            <p>@display.Name</p>

                            <!-- Buttons for files/folders-->
                            <div id="fileButtonHolder-@display.Id" class="fileButtonHolder" style="display:none;">

                                <button id="fileSettingsButton" onclick="downloadFile('@display.Id')">
                                    <img id="fileSettingsImage" src="~/images/file-icons/cloud-download.svg" alt="path">
                                </button>
                                <button id="fileSettingsButton" aria-expanded="false" aria-controls="file-info-@display.Id" onclick="toggleFileInfo('file-info-@display.Id')">
                                    <img id="fileSettingsImage" src="~/images/file-icons/three-dots.svg" alt="path">

                                    <div id="file-info-@display.Id" class="file-info">
                                        <div class="menu" id="@display.Id-menu">
                                            <div class="menu-item" onclick="downloadFile('@display.Id')">Download</div>
                                            <div class="menu-item" onclick="deleteFile('@display.Id', '@display.Type')">Delete</div>
                                            <div class="menu-item" onclick="renameFile('@display.Id')">Rename</div>
                                        </div>
                                    </div>
                                </button>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="no-files text-center">
                    <img class="row" src="~/images/tools/search.svg" alt="search" style="width: -webkit-fill-available; opacity: 50%;">
                    <h3 class="row">No files here</h3>
                </div>
            }
        </div>
    </div>
</div>

@{

    string GetImageForFileType(string fileType)
    {
        //looks at files Mime type and gets appropriate image
        switch (fileType.ToLower())
        {
            // Folder
            case "folder":
                return "folder.svg";

            // Images
            case "image/png":
            case "image/jpeg":
            case "image/gif":
                return "gen-image.svg";

            // Audio
            case "audio/mpeg":
                return "gen-music.svg";

            // Video
            case "video/mp4":
                return "gen-video.svg";

            // PDF
            case "application/pdf":
                return "file-pdf.svg";

            // Office products
            case "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
            case "application/msword":
                return "file-word.svg"; // Word Document (.docx)

            case "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
            case "application/vnd.ms-excel":
                return "file-excel.svg"; // Excel Spreadsheet (.xlsx)

            case "application/vnd.openxmlformats-officedocument.presentationml.presentation":
            case "application/vnd.ms-powerpoint":
                return "file-powerpoint.svg"; // PowerPoint Presentation (.pptx)

            case "application/x-mspublisher":
                return "file-publisher.svg"; // Publisher (.pub)

            case "application/msaccess":
                return "file-access.svg"; // Access Database (.accdb)

            // Executable
            case "application/x-msdownload":
            case "application/octet-stream":
            case "application/vnd.microsoft.portable-executable":
                return "file-executable.svg"; // Executable (.exe)

            //JSON
            case "application/json":
                return "file-json.svg";

            //Plain text
            case "text/plain":
                return "file-text.svg";

            // Anything else
            default:
                return "gen-unknown.svg"; // Unknown type
        }
    }

    <script>
        //Changes the sort image when pressed
        function toggleImage() {
            var imageElement = document.getElementById('toggleImage');
            if (imageElement.src.endsWith('sort-alpha-down.svg')) {
                imageElement.src = 'images/tools/sort-alpha-up.svg';
            } else {
                imageElement.src = 'images/tools/sort-alpha-down.svg';
            }
        }
    </script>
}